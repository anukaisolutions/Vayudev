import requests
key = "4dddafc191664c47ab1140145191203"
lat = 30.723
lon = 76.789
loc = str(lat)+","+str(lon)
url = "https://api.worldweatheronline.com/premium/v1/weather.ashx"+"?q="+loc+"&key="+key+"&format=json"

response = requests.get(url)
# response = response.content.decode("utf-8")

types = response.json().get("data").get("request")[0].get("type")
querys = response.json().get("data").get("request")[0].get("query")

observation_time = response.json().get("data").get("current_condition")[0].get("observation_time")
temp_C = response.json().get("data").get("current_condition")[0].get("temp_C")
temp_F = response.json().get("data").get("current_condition")[0].get("temp_F")
current_weatherCode = response.json().get("data").get("current_condition")[0].get("weatherCode")
weatherIconUrl = response.json().get("data").get("current_condition")[0].get("weatherIconUrl")[0].get("value")
weatherDesc = response.json().get("data").get("current_condition")[0].get("weatherDesc")[0].get("value")

windSpeedMiles = response.json().get("data").get("current_condition")[0].get("windSpeedMiles")
windSpeedKmph = response.json().get("data").get("current_condition")[0].get("windSpeedKmph")
winddirDegree = response.json().get("data").get("current_condition")[0].get("winddirDegree")
winddir16Point = response.json().get("data").get("current_condition")[0].get("winddir16Point")
precipMM = response.json().get("data").get("current_condition")[0].get("precipMM")
humidity = response.json().get("data").get("current_condition")[0].get("humidity")
visibility = response.json().get("data").get("current_condition")[0].get("visibility")
pressure = response.json().get("data").get("current_condition")[0].get("pressure")
cloudcover = response.json().get("data").get("current_condition")[0].get("cloudcover")
FeelsLikeC = response.json().get("data").get("current_condition")[0].get("FeelsLikeC")
FeelsLikeF = response.json().get("data").get("current_condition")[0].get("FeelsLikeF")
uvIndex = response.json().get("data").get("current_condition")[0].get("uvIndex")
# 0,14
# for day in range(0,1):
#     date = response.json().get("data").get("weather")[day].get("date")
#     sunrise = response.json().get("data").get("weather")[day].get("astronomy")[0].get("sunrise")
#     sunset = response.json().get("data").get("weather")[day].get("astronomy")[0].get("sunset")
#     moonrise = response.json().get("data").get("weather")[day].get("astronomy")[0].get("moonrise")
#     moonset = response.json().get("data").get("weather")[day].get("astronomy")[0].get("moonset")
#     moon_phase = response.json().get("data").get("weather")[day].get("astronomy")[0].get("moon_phase")
#     moon_illumination = response.json().get("data").get("weather")[day].get("astronomy")[0].get("moon_illumination")
#     maxtempC = response.json().get("data").get("weather")[day].get("maxtempC")
#     maxtempF = response.json().get("data").get("weather")[day].get("maxtempF")
#     mintempC = response.json().get("data").get("weather")[day].get("mintempC")
#     mintempF = response.json().get("data").get("weather")[day].get("mintempF")
#     totalSnow_cm = response.json().get("data").get("weather")[day].get("totalSnow_cm")
#     sunHour = response.json().get("data").get("weather")[day].get("sunHour")
#     uvIndex = response.json().get("data").get("weather")[day].get("uvIndex")
# # 0,8
#     for hour in range (0,1):
#         time = response.json().get("data").get("weather")[day].get("hourly")[hour].get("time")
#         tempC = response.json().get("data").get("weather")[day].get("hourly")[hour].get("tempC")
#         tempF = response.json().get("data").get("weather")[day].get("hourly")[hour].get("tempF")
#         windspeedMiles = response.json().get("data").get("weather")[day].get("hourly")[hour].get("windspeedMiles")
#         windspeedkmph = response.json().get("data").get("weather")[day].get("hourly")[hour].get("windspeedkmph")
#         winddirDegree = response.json().get("data").get("weather")[day].get("hourly")[hour].get("winddirDegree")
#         hourly_weatherCode = response.json().get("data").get("weather")[day].get("hourly")[hour].get("weatherCode")
#         winddir16Point = response.json().get("data").get("weather")[day].get("hourly")[hour].get("winddir16Point")
#         weatherIconUrl = response.json().get("data").get("weather")[day].get("hourly")[hour].get("weatherIconUrl")[0].get("value")
#         weatherDesc = response.json().get("data").get("weather")[day].get("hourly")[hour].get("weatherDesc")[0].get("value")
#         precipMM = response.json().get("data").get("weather")[day].get("hourly")[hour].get("precipMM")
#         humidity = response.json().get("data").get("weather")[day].get("hourly")[hour].get("humidity")
#         visibility = response.json().get("data").get("weather")[day].get("hourly")[hour].get("visibility")
#         pressure = response.json().get("data").get("weather")[day].get("hourly")[hour].get("pressure")
#         cloudcover = response.json().get("data").get("weather")[day].get("hourly")[hour].get("cloudcover")
#         HeatIndexC = response.json().get("data").get("weather")[day].get("hourly")[hour].get("HeatIndexC")
#         HeatIndexF = response.json().get("data").get("weather")[day].get("hourly")[hour].get("HeatIndexF")
#         DewPointC = response.json().get("data").get("weather")[day].get("hourly")[hour].get("DewPointC")
#         DewPointF = response.json().get("data").get("weather")[day].get("hourly")[hour].get("DewPointF")
#         WindChillC = response.json().get("data").get("weather")[day].get("hourly")[hour].get("WindChillC")
#         WindChillF = response.json().get("data").get("weather")[day].get("hourly")[hour].get("WindChillF")
#         WindGustMiles = response.json().get("data").get("weather")[day].get("hourly")[hour].get("WindGustMiles")
#         WindGustKmph = response.json().get("data").get("weather")[day].get("hourly")[hour].get("WindGustKmph")
#         FeelsLikeC = response.json().get("data").get("weather")[day].get("hourly")[hour].get("FeelsLikeC")
#         FeelsLikeF = response.json().get("data").get("weather")[day].get("hourly")[hour].get("FeelsLikeF")
#         chanceofrain = response.json().get("data").get("weather")[day].get("hourly")[hour].get("chanceofrain")
#         chanceofremdry = response.json().get("data").get("weather")[day].get("hourly")[hour].get("chanceofremdry")
#         chanceofwindy = response.json().get("data").get("weather")[day].get("hourly")[hour].get("chanceofwindy")
#         chanceofovercast = response.json().get("data").get("weather")[day].get("hourly")[hour].get("chanceofovercast")
#         chanceofsunshine = response.json().get("data").get("weather")[day].get("hourly")[hour].get("chanceofsunshine")
#         chanceoffrost = response.json().get("data").get("weather")[day].get("hourly")[hour].get("chanceoffrost")
#         chanceofhightemp = response.json().get("data").get("weather")[day].get("hourly")[hour].get("chanceofhightemp")
#         chanceoffog = response.json().get("data").get("weather")[day].get("hourly")[hour].get("chanceoffog")
#         chanceofsnow = response.json().get("data").get("weather")[day].get("hourly")[hour].get("chanceofsnow")
#         chanceofthunder = response.json().get("data").get("weather")[day].get("hourly")[hour].get("chanceofthunder")
#         uvIndex = response.json().get("data").get("weather")[day].get("hourly")[hour].get("uvIndex")

# # 0,12
# # climate averages
# for month in range(0,1):
#     index = response.json().get("data").get("ClimateAverages")[0].get("month")[month].get("index")
#     name = response.json().get("data").get("ClimateAverages")[0].get("month")[month].get("name")
#     avgMinTemp = response.json().get("data").get("ClimateAverages")[0].get("month")[month].get("avgMinTemp")
#     avgMinTemp_F = response.json().get("data").get("ClimateAverages")[0].get("month")[month].get("avgMinTemp_F")
#     absMaxTemp = response.json().get("data").get("ClimateAverages")[0].get("month")[month].get("absMaxTemp")
#     absMaxTemp_F = response.json().get("data").get("ClimateAverages")[0].get("month")[month].get("absMaxTemp_F")
#     avgDailyRainfall = response.json().get("data").get("ClimateAverages")[0].get("month")[month].get("avgDailyRainfall")
# # print(url)
print(lat)
print(lon)
print(types)
print(querys)
print(observation_time)
print(temp_C)
print(temp_F)
print(current_weatherCode)
print(weatherIconUrl)
print(weatherDesc)
print(windSpeedMiles)
print(windSpeedKmph)
print(winddirDegree)
print(winddir16Point)
print(precipMM)
print(humidity)
print(visibility)
print(pressure)
print(cloudcover)
print(FeelsLikeC)
print(FeelsLikeF)
print(uvIndex)
# print(date)
# print(sunrise)
# print(sunset)
# print(moonrise)
# print(moonset)
# print(moon_phase)
# print(moon_illumination)
# print(maxtempC)
# print(maxtempF)
# print(mintempC)
# print(mintempF)
# print(totalSnow_cm)
# print(sunHour)
# print(uvIndex)
# print(time)
# print(tempC)
# print(tempF)
# print(windspeedMiles)
# print(windspeedkmph)
# print(winddirDegree)
# print(hourly_weatherCode)
# print(winddir16Point)
# print(weatherIconUrl)
# print(weatherDesc)
# print(precipMM)
# print(humidity)
# print(visibility)
# print(pressure)
# print(cloudcover)
# print(HeatIndexC)
# print(HeatIndexF)
# print(DewPointC)
# print(DewPointF)
# print(WindChillC)
# print(WindChillF)
# print(WindGustMiles)
# print(WindGustKmph)
# print(FeelsLikeC)
# print(FeelsLikeF)
# print(chanceofrain)
# print(chanceofremdry)
# print(chanceofwindy)
# print(chanceofovercast)
# print(chanceofsunshine)
# print(chanceoffrost)
# print(chanceofhightemp)
# print(chanceoffog)
# print(chanceofsnow)
# print(chanceofthunder)
# print(uvIndex)
